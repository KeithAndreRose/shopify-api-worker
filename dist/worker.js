!function(e){var t={};function s(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)s.d(n,o,function(t){return e[t]}.bind(null,o));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=1)}([function(e,t){const s=e=>t=>t.method.toLowerCase()===e.toLowerCase(),n=s("connect"),o=s("delete"),r=s("get"),a=s("head"),i=s("options"),c=s("patch"),p=s("post"),u=s("put"),d=s("trace"),h=e=>t=>{const s=new URL(t.url).pathname;return(s.match(e)||[])[0]===s};e.exports=class{constructor(){this.routes=[]}handle(e,t){return this.routes.push({conditions:e,handler:t}),this}connect(e,t){return this.handle([n,h(e)],t)}delete(e,t){return this.handle([o,h(e)],t)}get(e,t){return this.handle([r,h(e)],t)}head(e,t){return this.handle([a,h(e)],t)}options(e,t){return this.handle([i,h(e)],t)}patch(e,t){return this.handle([c,h(e)],t)}post(e,t){return this.handle([p,h(e)],t)}put(e,t){return this.handle([u,h(e)],t)}trace(e,t){return this.handle([d,h(e)],t)}all(e){return this.handle([],e)}route(e){const t=this.resolve(e);return t?t.handler(e):new Response("resource not found",{status:404,statusText:"not found",headers:{"content-type":"text/plain"}})}resolve(e){return this.routes.find(t=>!(t.conditions&&(!Array.isArray(t)||t.conditions.length))||("function"==typeof t.conditions?t.conditions(e):t.conditions.every(t=>t(e))))}}},function(e,t,s){"use strict";s.r(t);var n={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, HEAD, POST, OPTIONS, PUT","Access-Control-Allow-Headers":"Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, X-Shopify-Access-Token","Access-Control-Allow-Credentials":"true"};var o=new Headers({"content-type":"application/json",...n}),r=async function(e){const t=new URL(e.url),s=t.searchParams.get("shop");if(!s)return new Response("Missing shop parameter. Please add ?shop=your-shopify-shop-name to your request",{status:400,headers:baseHeaders});const n=e.headers.get("X-Shopify-Access-Token");if(!n)return new Response("Missing access token",{status:400,headers:baseHeaders});return{url:t,shop:s,token:n,json:await e.clone().json()}};const a=s(0);addEventListener("fetch",e=>{e.respondWith(async function(e){if("OPTIONS"===e.method)return function(e){return null!==e.headers.get("Origin")&&null!==e.headers.get("Access-Control-Request-Method")&&null!==e.headers.get("Access-Control-Request-Headers")?new Response(null,{headers:n}):new Response(null,{headers:{Allow:"GET, HEAD, POST, OPTIONS"}})}(e);const t=new a;t.get("/authorize",e=>async function(e){const t=new URL(e.url),s=t.searchParams.get("shop");if(s){const e=t.searchParams.get("redirect");if(!e)return new Response(`\n      URL: ${t}\n      Shop Param: ${s}\n      Missing the redirect parameter. Please add ?redirect=your-app-redirect to your request\n      `,{status:400,headers:o});const n=`https://${s}.myshopify.com/admin/oauth/authorize?client_id=${API_KEY}&scope=${"read_orders,write_products"}&redirect_uri=${e}&state=${"fc3n8nf92dx"}&grant_options[]=${"per-user"}`;return Response.redirect(n)}return new Response("Missing shop parameter. Please add ?shop=your-development-shop to your request",{status:400,headers:o})}(e)),t.post("/getToken",e=>(void 0)(e)),t.get("/allProducts",e=>async function(e){const t=new URL(e.url).searchParams.get("shop");if(!t)return new Response("Missing shop parameter. Please add ?shop=your-store-name to your request",{status:400,headers:o});const s=await fetch(`https://${t}.myshopify.com/admin/api/2020-04/products.json`,{method:"GET",headers:new Headers({Accept:"application/json","X-Shopify-Access-Token":token})}).then(e=>e.json());return new Response(JSON.stringify(s),{headers:o,status:200})}(e)),t.post("/createProduct",e=>async function(e){const{url:t,shop:s,token:n,json:a}=r(e),i=await fetch(`https://${s}.myshopify.com/admin/api/2020-04/products.json`,{method:"POST",headers:new Headers({Accept:"application/json","Content-Type":"application/json","X-Shopify-Access-Token":n}),body:JSON.stringify(a)}).then(e=>e.json());return new Response(JSON.stringify(i),{headers:o,status:200})}(e)),t.get("/collect",e=>async function(e){const t=new URL(e.url),s=t.searchParams.get("shop"),n=t.searchParams.get("collect_id");if(!s)return new Response("Missing shop parameter. Please add ?shop=your-store-name to your request",{status:400,headers:o});if(!n)return new Response("Missing collectID parameter. Please add ?collect_id=collectID to your request",{status:400,headers:o});const r=await fetch(`https://${s}.myshopify.com/admin/api/2020-04/collects/${n}.json`,{method:"GET",headers:new Headers({Accept:"application/json","X-Shopify-Access-Token":token})}).then(e=>e.json());return new Response(JSON.stringify(r),{headers:o,status:200})}(e)),t.post("/collect",e=>async function(e){const{url:t,shop:s,token:n,json:a}=r(e),i=await fetch(`https://${s}.myshopify.com/admin/api/2020-04/collects.json`,{method:"POST",headers:new Headers({Accept:"application/json","Content-Type":"application/json","X-Shopify-Access-Token":n}),body:JSON.stringify(a)}).then(e=>e.json());return new Response(JSON.stringify(i),{headers:o,status:200})}(e)),t.delete("/collect",e=>async function(e){const t=new URL(e.url),s=t.searchParams.get("shop"),n=t.searchParams.get("collect_id");if(!s)return new Response("Missing shop parameter. Please add ?shop=your-store-name to your request",{status:400,headers:o});if(!n)return new Response("Missing collectID parameter. Please add ?collect_id=collectID to your request",{status:400,headers:o});const r=await fetch(`https://${s}.myshopify.com/admin/api/2020-04/collects/${n}.json`,{method:"DELETE",headers:new Headers({Accept:"application/json","X-Shopify-Access-Token":token})}).then(e=>e.json());return new Response(JSON.stringify(r),{headers:o,status:200})}(e)),t.get("/shopMetafields",e=>async function(e){const t=new URL(e.url).searchParams.get("shop");if(!t)return new Response("Missing shop parameter. Please add ?shop=your-store-name to your request",{status:400,headers:o});const s=await fetch(`https://${t}.myshopify.com/admin/api/2020-04/metafields.json`,{method:"GET",headers:new Headers({Accept:"application/json","X-Shopify-Access-Token":token})}).then(e=>e.json());return new Response(JSON.stringify(s),{headers:o,status:200})}(e)),t.post("/shopMetafields",e=>async function(e){const{url:t,shop:s,token:n,json:a}=r(e),i=await fetch(`https://${s}.myshopify.com/admin/api/2020-04/metafields.json`,{method:"POST",headers:new Headers({Accept:"application/json","Content-Type":"application/json","X-Shopify-Access-Token":n}),body:JSON.stringify(a)}).then(e=>e.json());return new Response(JSON.stringify(i),{headers:o,status:200})}(e)),t.put("/shopMetafield",e=>async function(e){const{url:t,shop:s,token:n,json:a}=r(e),i=t.searchParams.get("metafield_id");if(!s)return new Response("Missing shop parameter. Please add ?shop=your-store-name to your request",{status:400,headers:o});if(!i)return new Response("Missing collectID parameter. Please add ?metafield_id=metafieldID to your request",{status:400,headers:o});const c=await fetch(`https://${s}.myshopify.com/admin/api/2020-04/metafields/${i}.json`,{method:"PUT",headers:new Headers({Accept:"application/json","Content-Type":"application/json","X-Shopify-Access-Token":n}),body:JSON.stringify(a)}).then(e=>e.json());return new Response(JSON.stringify(c),{headers:o,status:200})}(e)),t.delete("/shopMetafield",e=>async function(e){const t=new URL(e.url),s=t.searchParams.get("shop"),n=t.searchParams.get("metafield_id");if(!s)return new Response("Missing shop parameter. Please add ?shop=your-store-name to your request",{status:400,headers:o});if(!n)return new Response("Missing collectID parameter. Please add ?metafield_id=metafieldID to your request",{status:400,headers:o});const r=await fetch(`https://${s}.myshopify.com/admin/api/2020-04/metafields/${n}.json`,{method:"DELETE",headers:new Headers({Accept:"application/json","X-Shopify-Access-Token":token})}).then(e=>e.json());return new Response(JSON.stringify(r),{headers:o,status:200})}(e)),t.get("/",()=>new Response("You found a shopify API",{headers:o})),t.get("/.*",()=>new Response("Nothing's Here",{status:404,statusText:"Not Found",headers:o}));return await t.route(e)}(e.request))})}]);